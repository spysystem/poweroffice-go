<?php
/**
 * CustomerLedgerEntry
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PowerOfficeGo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerOffice-Go API
 *
 * PowerOffice Go API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PowerOfficeGo\Model;

use \ArrayAccess;
use \PowerOfficeGo\ObjectSerializer;

/**
 * CustomerLedgerEntry Class Doc Comment
 *
 * @category Class
 * @package  PowerOfficeGo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerLedgerEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return CustomerLedgerEntryModelFields
      */
    public static function GetModelFields(): CustomerLedgerEntryModelFields
    {
        return new CustomerLedgerEntryModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return CustomerLedgerEntryModelAttributes
      */
    public static function GetModelAttributes(): CustomerLedgerEntryModelAttributes
    {
        return new CustomerLedgerEntryModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerLedgerEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'posting_date' => 'string',
        'due_date' => 'string',
        'voucher_no' => 'int',
        'currency_code' => 'string',
        'currency_amount' => 'float',
        'amount' => 'float',
        'balance' => 'float',
        'voucher_id' => 'string',
        'voucher_date' => 'string',
        'voucher_type' => 'int',
        'match_id' => 'int',
        'last_changed' => 'string',
        'created_date' => 'string',
        'customer' => '\PowerOfficeGo\Model\Customer',
        'custom_matching_reference' => 'string',
        'external_import_reference' => 'string',
        'document_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'posting_date' => null,
        'due_date' => null,
        'voucher_no' => null,
        'currency_code' => null,
        'currency_amount' => null,
        'amount' => null,
        'balance' => null,
        'voucher_id' => null,
        'voucher_date' => null,
        'voucher_type' => null,
        'match_id' => null,
        'last_changed' => null,
        'created_date' => null,
        'customer' => null,
        'custom_matching_reference' => null,
        'external_import_reference' => null,
        'document_no' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'posting_date' => false,
		'due_date' => false,
		'voucher_no' => false,
		'currency_code' => false,
		'currency_amount' => false,
		'amount' => false,
		'balance' => false,
		'voucher_id' => false,
		'voucher_date' => false,
		'voucher_type' => false,
		'match_id' => false,
		'last_changed' => false,
		'created_date' => false,
		'customer' => false,
		'custom_matching_reference' => false,
		'external_import_reference' => false,
		'document_no' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'posting_date' => 'postingDate',
        'due_date' => 'dueDate',
        'voucher_no' => 'voucherNo',
        'currency_code' => 'currencyCode',
        'currency_amount' => 'currencyAmount',
        'amount' => 'amount',
        'balance' => 'balance',
        'voucher_id' => 'voucherId',
        'voucher_date' => 'voucherDate',
        'voucher_type' => 'voucherType',
        'match_id' => 'matchId',
        'last_changed' => 'lastChanged',
        'created_date' => 'createdDate',
        'customer' => 'customer',
        'custom_matching_reference' => 'customMatchingReference',
        'external_import_reference' => 'externalImportReference',
        'document_no' => 'documentNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'posting_date' => 'setPostingDate',
        'due_date' => 'setDueDate',
        'voucher_no' => 'setVoucherNo',
        'currency_code' => 'setCurrencyCode',
        'currency_amount' => 'setCurrencyAmount',
        'amount' => 'setAmount',
        'balance' => 'setBalance',
        'voucher_id' => 'setVoucherId',
        'voucher_date' => 'setVoucherDate',
        'voucher_type' => 'setVoucherType',
        'match_id' => 'setMatchId',
        'last_changed' => 'setLastChanged',
        'created_date' => 'setCreatedDate',
        'customer' => 'setCustomer',
        'custom_matching_reference' => 'setCustomMatchingReference',
        'external_import_reference' => 'setExternalImportReference',
        'document_no' => 'setDocumentNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'posting_date' => 'getPostingDate',
        'due_date' => 'getDueDate',
        'voucher_no' => 'getVoucherNo',
        'currency_code' => 'getCurrencyCode',
        'currency_amount' => 'getCurrencyAmount',
        'amount' => 'getAmount',
        'balance' => 'getBalance',
        'voucher_id' => 'getVoucherId',
        'voucher_date' => 'getVoucherDate',
        'voucher_type' => 'getVoucherType',
        'match_id' => 'getMatchId',
        'last_changed' => 'getLastChanged',
        'created_date' => 'getCreatedDate',
        'customer' => 'getCustomer',
        'custom_matching_reference' => 'getCustomMatchingReference',
        'external_import_reference' => 'getExternalImportReference',
        'document_no' => 'getDocumentNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('posting_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('voucher_no', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('currency_amount', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('voucher_id', $data ?? [], null);
        $this->setIfExists('voucher_date', $data ?? [], null);
        $this->setIfExists('voucher_type', $data ?? [], null);
        $this->setIfExists('match_id', $data ?? [], null);
        $this->setIfExists('last_changed', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('custom_matching_reference', $data ?? [], null);
        $this->setIfExists('external_import_reference', $data ?? [], null);
        $this->setIfExists('document_no', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets posting_date
     *
     * @return string|null
     */
    public function getPostingDate()
    {
        return $this->container['posting_date'];
    }

    /**
     * Sets posting_date
     *
     * @param string|null $posting_date posting_date
     *
     * @return self
     */
    public function setPostingDate($posting_date)
    {
        if (is_null($posting_date)) {
            throw new \InvalidArgumentException('non-nullable posting_date cannot be null');
        }
        $this->container['posting_date'] = $posting_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets voucher_no
     *
     * @return int|null
     */
    public function getVoucherNo()
    {
        return $this->container['voucher_no'];
    }

    /**
     * Sets voucher_no
     *
     * @param int|null $voucher_no voucher_no
     *
     * @return self
     */
    public function setVoucherNo($voucher_no)
    {
        if (is_null($voucher_no)) {
            throw new \InvalidArgumentException('non-nullable voucher_no cannot be null');
        }
        $this->container['voucher_no'] = $voucher_no;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_amount
     *
     * @return float|null
     */
    public function getCurrencyAmount()
    {
        return $this->container['currency_amount'];
    }

    /**
     * Sets currency_amount
     *
     * @param float|null $currency_amount currency_amount
     *
     * @return self
     */
    public function setCurrencyAmount($currency_amount)
    {
        if (is_null($currency_amount)) {
            throw new \InvalidArgumentException('non-nullable currency_amount cannot be null');
        }
        $this->container['currency_amount'] = $currency_amount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string|null
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string|null $voucher_id voucher_id
     *
     * @return self
     */
    public function setVoucherId($voucher_id)
    {
        if (is_null($voucher_id)) {
            throw new \InvalidArgumentException('non-nullable voucher_id cannot be null');
        }
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets voucher_date
     *
     * @return string|null
     */
    public function getVoucherDate()
    {
        return $this->container['voucher_date'];
    }

    /**
     * Sets voucher_date
     *
     * @param string|null $voucher_date voucher_date
     *
     * @return self
     */
    public function setVoucherDate($voucher_date)
    {
        if (is_null($voucher_date)) {
            throw new \InvalidArgumentException('non-nullable voucher_date cannot be null');
        }
        $this->container['voucher_date'] = $voucher_date;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return int|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param int|null $voucher_type voucher_type
     *
     * @return self
     */
    public function setVoucherType($voucher_type)
    {
        if (is_null($voucher_type)) {
            throw new \InvalidArgumentException('non-nullable voucher_type cannot be null');
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets match_id
     *
     * @return int|null
     */
    public function getMatchId()
    {
        return $this->container['match_id'];
    }

    /**
     * Sets match_id
     *
     * @param int|null $match_id match_id
     *
     * @return self
     */
    public function setMatchId($match_id)
    {
        if (is_null($match_id)) {
            throw new \InvalidArgumentException('non-nullable match_id cannot be null');
        }
        $this->container['match_id'] = $match_id;

        return $this;
    }

    /**
     * Gets last_changed
     *
     * @return string|null
     */
    public function getLastChanged()
    {
        return $this->container['last_changed'];
    }

    /**
     * Sets last_changed
     *
     * @param string|null $last_changed last_changed
     *
     * @return self
     */
    public function setLastChanged($last_changed)
    {
        if (is_null($last_changed)) {
            throw new \InvalidArgumentException('non-nullable last_changed cannot be null');
        }
        $this->container['last_changed'] = $last_changed;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \PowerOfficeGo\Model\Customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \PowerOfficeGo\Model\Customer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets custom_matching_reference
     *
     * @return string|null
     */
    public function getCustomMatchingReference()
    {
        return $this->container['custom_matching_reference'];
    }

    /**
     * Sets custom_matching_reference
     *
     * @param string|null $custom_matching_reference custom_matching_reference
     *
     * @return self
     */
    public function setCustomMatchingReference($custom_matching_reference)
    {
        if (is_null($custom_matching_reference)) {
            throw new \InvalidArgumentException('non-nullable custom_matching_reference cannot be null');
        }
        $this->container['custom_matching_reference'] = $custom_matching_reference;

        return $this;
    }

    /**
     * Gets external_import_reference
     *
     * @return string|null
     */
    public function getExternalImportReference()
    {
        return $this->container['external_import_reference'];
    }

    /**
     * Sets external_import_reference
     *
     * @param string|null $external_import_reference external_import_reference
     *
     * @return self
     */
    public function setExternalImportReference($external_import_reference)
    {
        if (is_null($external_import_reference)) {
            throw new \InvalidArgumentException('non-nullable external_import_reference cannot be null');
        }
        $this->container['external_import_reference'] = $external_import_reference;

        return $this;
    }

    /**
     * Gets document_no
     *
     * @return string|null
     */
    public function getDocumentNo()
    {
        return $this->container['document_no'];
    }

    /**
     * Sets document_no
     *
     * @param string|null $document_no document_no
     *
     * @return self
     */
    public function setDocumentNo($document_no)
    {
        if (is_null($document_no)) {
            throw new \InvalidArgumentException('non-nullable document_no cannot be null');
        }
        $this->container['document_no'] = $document_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


