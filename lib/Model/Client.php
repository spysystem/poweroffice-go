<?php
/**
 * Client
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PowerOfficeGo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerOffice-Go API
 *
 * PowerOffice Go API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PowerOfficeGo\Model;

use \ArrayAccess;
use \PowerOfficeGo\ObjectSerializer;

/**
 * Client Class Doc Comment
 *
 * @category Class
 * @package  PowerOfficeGo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Client implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ClientModelFields
      */
    public static function GetModelFields(): ClientModelFields
    {
        return new ClientModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ClientModelAttributes
      */
    public static function GetModelAttributes(): ClientModelAttributes
    {
        return new ClientModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'legal_name' => 'string',
        'vat_number' => 'string',
        'mail_address' => '\PowerOfficeGo\Model\MailAddress',
        'street_address' => '\PowerOfficeGo\Model\MailAddress',
        'email_address' => 'string',
        'phone_number' => 'string',
        'website_url' => 'string',
        'last_changed' => 'string',
        'lock_date' => 'string',
        'sales_account_code' => 'int',
        'vat_exempt_sales_account_code' => 'int',
        'is_vat_registered' => 'bool',
        'vat_period' => 'int',
        'financial_year_end_month' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'legal_name' => null,
        'vat_number' => null,
        'mail_address' => null,
        'street_address' => null,
        'email_address' => null,
        'phone_number' => null,
        'website_url' => null,
        'last_changed' => null,
        'lock_date' => null,
        'sales_account_code' => null,
        'vat_exempt_sales_account_code' => null,
        'is_vat_registered' => null,
        'vat_period' => null,
        'financial_year_end_month' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'legal_name' => false,
		'vat_number' => false,
		'mail_address' => false,
		'street_address' => false,
		'email_address' => false,
		'phone_number' => false,
		'website_url' => false,
		'last_changed' => false,
		'lock_date' => false,
		'sales_account_code' => false,
		'vat_exempt_sales_account_code' => false,
		'is_vat_registered' => false,
		'vat_period' => false,
		'financial_year_end_month' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'legal_name' => 'legalName',
        'vat_number' => 'vatNumber',
        'mail_address' => 'mailAddress',
        'street_address' => 'streetAddress',
        'email_address' => 'emailAddress',
        'phone_number' => 'phoneNumber',
        'website_url' => 'websiteUrl',
        'last_changed' => 'lastChanged',
        'lock_date' => 'lockDate',
        'sales_account_code' => 'salesAccountCode',
        'vat_exempt_sales_account_code' => 'vatExemptSalesAccountCode',
        'is_vat_registered' => 'isVatRegistered',
        'vat_period' => 'vatPeriod',
        'financial_year_end_month' => 'FinancialYearEndMonth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'legal_name' => 'setLegalName',
        'vat_number' => 'setVatNumber',
        'mail_address' => 'setMailAddress',
        'street_address' => 'setStreetAddress',
        'email_address' => 'setEmailAddress',
        'phone_number' => 'setPhoneNumber',
        'website_url' => 'setWebsiteUrl',
        'last_changed' => 'setLastChanged',
        'lock_date' => 'setLockDate',
        'sales_account_code' => 'setSalesAccountCode',
        'vat_exempt_sales_account_code' => 'setVatExemptSalesAccountCode',
        'is_vat_registered' => 'setIsVatRegistered',
        'vat_period' => 'setVatPeriod',
        'financial_year_end_month' => 'setFinancialYearEndMonth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'legal_name' => 'getLegalName',
        'vat_number' => 'getVatNumber',
        'mail_address' => 'getMailAddress',
        'street_address' => 'getStreetAddress',
        'email_address' => 'getEmailAddress',
        'phone_number' => 'getPhoneNumber',
        'website_url' => 'getWebsiteUrl',
        'last_changed' => 'getLastChanged',
        'lock_date' => 'getLockDate',
        'sales_account_code' => 'getSalesAccountCode',
        'vat_exempt_sales_account_code' => 'getVatExemptSalesAccountCode',
        'is_vat_registered' => 'getIsVatRegistered',
        'vat_period' => 'getVatPeriod',
        'financial_year_end_month' => 'getFinancialYearEndMonth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('vat_number', $data ?? [], null);
        $this->setIfExists('mail_address', $data ?? [], null);
        $this->setIfExists('street_address', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('website_url', $data ?? [], null);
        $this->setIfExists('last_changed', $data ?? [], null);
        $this->setIfExists('lock_date', $data ?? [], null);
        $this->setIfExists('sales_account_code', $data ?? [], null);
        $this->setIfExists('vat_exempt_sales_account_code', $data ?? [], null);
        $this->setIfExists('is_vat_registered', $data ?? [], null);
        $this->setIfExists('vat_period', $data ?? [], null);
        $this->setIfExists('financial_year_end_month', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name legal_name
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            throw new \InvalidArgumentException('non-nullable legal_name cannot be null');
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string|null $vat_number vat_number
     *
     * @return self
     */
    public function setVatNumber($vat_number)
    {
        if (is_null($vat_number)) {
            throw new \InvalidArgumentException('non-nullable vat_number cannot be null');
        }
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets mail_address
     *
     * @return \PowerOfficeGo\Model\MailAddress|null
     */
    public function getMailAddress()
    {
        return $this->container['mail_address'];
    }

    /**
     * Sets mail_address
     *
     * @param \PowerOfficeGo\Model\MailAddress|null $mail_address mail_address
     *
     * @return self
     */
    public function setMailAddress($mail_address)
    {
        if (is_null($mail_address)) {
            throw new \InvalidArgumentException('non-nullable mail_address cannot be null');
        }
        $this->container['mail_address'] = $mail_address;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return \PowerOfficeGo\Model\MailAddress|null
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param \PowerOfficeGo\Model\MailAddress|null $street_address street_address
     *
     * @return self
     */
    public function setStreetAddress($street_address)
    {
        if (is_null($street_address)) {
            throw new \InvalidArgumentException('non-nullable street_address cannot be null');
        }
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string|null $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        if (is_null($website_url)) {
            throw new \InvalidArgumentException('non-nullable website_url cannot be null');
        }
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets last_changed
     *
     * @return string|null
     */
    public function getLastChanged()
    {
        return $this->container['last_changed'];
    }

    /**
     * Sets last_changed
     *
     * @param string|null $last_changed last_changed
     *
     * @return self
     */
    public function setLastChanged($last_changed)
    {
        if (is_null($last_changed)) {
            throw new \InvalidArgumentException('non-nullable last_changed cannot be null');
        }
        $this->container['last_changed'] = $last_changed;

        return $this;
    }

    /**
     * Gets lock_date
     *
     * @return string|null
     */
    public function getLockDate()
    {
        return $this->container['lock_date'];
    }

    /**
     * Sets lock_date
     *
     * @param string|null $lock_date Gets the lock date on the client. It's not possible to create accounting entries on this date or any previous date on this client.
     *
     * @return self
     */
    public function setLockDate($lock_date)
    {
        if (is_null($lock_date)) {
            throw new \InvalidArgumentException('non-nullable lock_date cannot be null');
        }
        $this->container['lock_date'] = $lock_date;

        return $this;
    }

    /**
     * Gets sales_account_code
     *
     * @return int|null
     */
    public function getSalesAccountCode()
    {
        return $this->container['sales_account_code'];
    }

    /**
     * Sets sales_account_code
     *
     * @param int|null $sales_account_code sales_account_code
     *
     * @return self
     */
    public function setSalesAccountCode($sales_account_code)
    {
        if (is_null($sales_account_code)) {
            throw new \InvalidArgumentException('non-nullable sales_account_code cannot be null');
        }
        $this->container['sales_account_code'] = $sales_account_code;

        return $this;
    }

    /**
     * Gets vat_exempt_sales_account_code
     *
     * @return int|null
     */
    public function getVatExemptSalesAccountCode()
    {
        return $this->container['vat_exempt_sales_account_code'];
    }

    /**
     * Sets vat_exempt_sales_account_code
     *
     * @param int|null $vat_exempt_sales_account_code vat_exempt_sales_account_code
     *
     * @return self
     */
    public function setVatExemptSalesAccountCode($vat_exempt_sales_account_code)
    {
        if (is_null($vat_exempt_sales_account_code)) {
            throw new \InvalidArgumentException('non-nullable vat_exempt_sales_account_code cannot be null');
        }
        $this->container['vat_exempt_sales_account_code'] = $vat_exempt_sales_account_code;

        return $this;
    }

    /**
     * Gets is_vat_registered
     *
     * @return bool|null
     */
    public function getIsVatRegistered()
    {
        return $this->container['is_vat_registered'];
    }

    /**
     * Sets is_vat_registered
     *
     * @param bool|null $is_vat_registered is_vat_registered
     *
     * @return self
     */
    public function setIsVatRegistered($is_vat_registered)
    {
        if (is_null($is_vat_registered)) {
            throw new \InvalidArgumentException('non-nullable is_vat_registered cannot be null');
        }
        $this->container['is_vat_registered'] = $is_vat_registered;

        return $this;
    }

    /**
     * Gets vat_period
     *
     * @return int|null
     */
    public function getVatPeriod()
    {
        return $this->container['vat_period'];
    }

    /**
     * Sets vat_period
     *
     * @param int|null $vat_period Gets the specified Value Added Tax period on this client. The VAT period states how often VAT is reported to the government from this client. 0 - None (No defined VAT period) 1 - Weekly (Every week) 2 - HalfMonthly (Half-Monthly) 3 - Monthly (Every month) 4 - BiMonthly (Every two months) 5 - Yearly (Once a year) 6 - HalfYearly (Twice a year) 7 - Quarterly (Four times a year)
     *
     * @return self
     */
    public function setVatPeriod($vat_period)
    {
        if (is_null($vat_period)) {
            throw new \InvalidArgumentException('non-nullable vat_period cannot be null');
        }
        $this->container['vat_period'] = $vat_period;

        return $this;
    }

    /**
     * Gets financial_year_end_month
     *
     * @return int|null
     */
    public function getFinancialYearEndMonth()
    {
        return $this->container['financial_year_end_month'];
    }

    /**
     * Sets financial_year_end_month
     *
     * @param int|null $financial_year_end_month Gets the end month for the accounting period. 0 - None (None, error value) 1-12 Month number
     *
     * @return self
     */
    public function setFinancialYearEndMonth($financial_year_end_month)
    {
        if (is_null($financial_year_end_month)) {
            throw new \InvalidArgumentException('non-nullable financial_year_end_month cannot be null');
        }
        $this->container['financial_year_end_month'] = $financial_year_end_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


