<?php
/**
 * AccountingTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PowerOfficeGo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerOffice-Go API
 *
 * PowerOffice Go API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PowerOfficeGo\Model;

use \ArrayAccess;
use \PowerOfficeGo\ObjectSerializer;

/**
 * AccountingTransaction Class Doc Comment
 *
 * @category Class
 * @package  PowerOfficeGo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountingTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return AccountingTransactionModelFields
      */
    public static function GetModelFields(): AccountingTransactionModelFields
    {
        return new AccountingTransactionModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return AccountingTransactionModelAttributes
      */
    public static function GetModelAttributes(): AccountingTransactionModelAttributes
    {
        return new AccountingTransactionModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountingTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'account_code' => 'int',
        'amount' => 'float',
        'bank_transfer_id' => 'string',
        'correction_of_voucher_no' => 'int',
        'created_date' => 'string',
        'created_from_import_journal_id' => 'string',
        'currency_amount' => 'float',
        'currency_code' => 'string',
        'customer_account_no' => 'int',
        'custom_matching_reference' => 'string',
        'date' => 'string',
        'department_code' => 'string',
        'description' => 'string',
        'dim1_code' => 'string',
        'dim2_code' => 'string',
        'dim3_code' => 'string',
        'document_no' => 'string',
        'employee_account_no' => 'int',
        'external_import_reference' => 'string',
        'has_voucher_documentation' => 'string',
        'imported_voucher_no' => 'int',
        'is_created_from_ehf' => 'bool',
        'is_note_main_entry' => 'bool',
        'is_reversed' => 'bool',
        'last_changed' => 'string',
        'location_code' => 'string',
        'our_reference_employee_code' => 'int',
        'product_code' => 'string',
        'project_code' => 'string',
        'quantity' => 'int',
        'reversed_voucher_no' => 'int',
        'sub_ledger_entry_id' => 'int',
        'supplier_account_no' => 'int',
        'text' => 'string',
        'vat_amount' => 'float',
        'vat_code' => 'string',
        'vat_rate' => 'float',
        'vat_return_specification' => 'float',
        'voucher_cid' => 'string',
        'voucher_credit_note_reference' => 'string',
        'voucher_date' => 'string',
        'voucher_due_date' => 'string',
        'voucher_id' => 'string',
        'voucher_images_count' => 'int',
        'voucher_no' => 'int',
        'voucher_reference' => 'int',
        'voucher_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'account_code' => null,
        'amount' => null,
        'bank_transfer_id' => null,
        'correction_of_voucher_no' => null,
        'created_date' => null,
        'created_from_import_journal_id' => null,
        'currency_amount' => null,
        'currency_code' => null,
        'customer_account_no' => null,
        'custom_matching_reference' => null,
        'date' => null,
        'department_code' => null,
        'description' => null,
        'dim1_code' => null,
        'dim2_code' => null,
        'dim3_code' => null,
        'document_no' => null,
        'employee_account_no' => null,
        'external_import_reference' => null,
        'has_voucher_documentation' => null,
        'imported_voucher_no' => null,
        'is_created_from_ehf' => null,
        'is_note_main_entry' => null,
        'is_reversed' => null,
        'last_changed' => null,
        'location_code' => null,
        'our_reference_employee_code' => null,
        'product_code' => null,
        'project_code' => null,
        'quantity' => null,
        'reversed_voucher_no' => null,
        'sub_ledger_entry_id' => null,
        'supplier_account_no' => null,
        'text' => null,
        'vat_amount' => null,
        'vat_code' => null,
        'vat_rate' => null,
        'vat_return_specification' => null,
        'voucher_cid' => null,
        'voucher_credit_note_reference' => null,
        'voucher_date' => null,
        'voucher_due_date' => null,
        'voucher_id' => null,
        'voucher_images_count' => null,
        'voucher_no' => null,
        'voucher_reference' => null,
        'voucher_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'account_code' => false,
		'amount' => false,
		'bank_transfer_id' => false,
		'correction_of_voucher_no' => false,
		'created_date' => false,
		'created_from_import_journal_id' => false,
		'currency_amount' => false,
		'currency_code' => false,
		'customer_account_no' => false,
		'custom_matching_reference' => false,
		'date' => false,
		'department_code' => false,
		'description' => false,
		'dim1_code' => false,
		'dim2_code' => false,
		'dim3_code' => false,
		'document_no' => false,
		'employee_account_no' => false,
		'external_import_reference' => false,
		'has_voucher_documentation' => false,
		'imported_voucher_no' => false,
		'is_created_from_ehf' => false,
		'is_note_main_entry' => false,
		'is_reversed' => false,
		'last_changed' => false,
		'location_code' => false,
		'our_reference_employee_code' => false,
		'product_code' => false,
		'project_code' => false,
		'quantity' => false,
		'reversed_voucher_no' => false,
		'sub_ledger_entry_id' => false,
		'supplier_account_no' => false,
		'text' => false,
		'vat_amount' => false,
		'vat_code' => false,
		'vat_rate' => false,
		'vat_return_specification' => false,
		'voucher_cid' => false,
		'voucher_credit_note_reference' => false,
		'voucher_date' => false,
		'voucher_due_date' => false,
		'voucher_id' => false,
		'voucher_images_count' => false,
		'voucher_no' => false,
		'voucher_reference' => false,
		'voucher_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_code' => 'accountCode',
        'amount' => 'amount',
        'bank_transfer_id' => 'bankTransferId',
        'correction_of_voucher_no' => 'correctionOfVoucherNo',
        'created_date' => 'createdDate',
        'created_from_import_journal_id' => 'createdFromImportJournalId',
        'currency_amount' => 'currencyAmount',
        'currency_code' => 'currencyCode',
        'customer_account_no' => 'customerAccountNo',
        'custom_matching_reference' => 'customMatchingReference',
        'date' => 'date',
        'department_code' => 'departmentCode',
        'description' => 'description',
        'dim1_code' => 'dim1Code',
        'dim2_code' => 'dim2Code',
        'dim3_code' => 'dim3Code',
        'document_no' => 'documentNo',
        'employee_account_no' => 'employeeAccountNo',
        'external_import_reference' => 'externalImportReference',
        'has_voucher_documentation' => 'hasVoucherDocumentation',
        'imported_voucher_no' => 'importedVoucherNo',
        'is_created_from_ehf' => 'isCreatedFromEhf',
        'is_note_main_entry' => 'isNoteMainEntry',
        'is_reversed' => 'isReversed',
        'last_changed' => 'lastChanged',
        'location_code' => 'locationCode',
        'our_reference_employee_code' => 'ourReferenceEmployeeCode',
        'product_code' => 'productCode',
        'project_code' => 'projectCode',
        'quantity' => 'quantity',
        'reversed_voucher_no' => 'reversedVoucherNo',
        'sub_ledger_entry_id' => 'subLedgerEntryId',
        'supplier_account_no' => 'supplierAccountNo',
        'text' => 'text',
        'vat_amount' => 'vatAmount',
        'vat_code' => 'vatCode',
        'vat_rate' => 'vatRate',
        'vat_return_specification' => 'vatReturnSpecification',
        'voucher_cid' => 'voucherCID',
        'voucher_credit_note_reference' => 'voucherCreditNoteReference',
        'voucher_date' => 'voucherDate',
        'voucher_due_date' => 'voucherDueDate',
        'voucher_id' => 'voucherId',
        'voucher_images_count' => 'voucherImagesCount',
        'voucher_no' => 'voucherNo',
        'voucher_reference' => 'voucherReference',
        'voucher_type' => 'voucherType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_code' => 'setAccountCode',
        'amount' => 'setAmount',
        'bank_transfer_id' => 'setBankTransferId',
        'correction_of_voucher_no' => 'setCorrectionOfVoucherNo',
        'created_date' => 'setCreatedDate',
        'created_from_import_journal_id' => 'setCreatedFromImportJournalId',
        'currency_amount' => 'setCurrencyAmount',
        'currency_code' => 'setCurrencyCode',
        'customer_account_no' => 'setCustomerAccountNo',
        'custom_matching_reference' => 'setCustomMatchingReference',
        'date' => 'setDate',
        'department_code' => 'setDepartmentCode',
        'description' => 'setDescription',
        'dim1_code' => 'setDim1Code',
        'dim2_code' => 'setDim2Code',
        'dim3_code' => 'setDim3Code',
        'document_no' => 'setDocumentNo',
        'employee_account_no' => 'setEmployeeAccountNo',
        'external_import_reference' => 'setExternalImportReference',
        'has_voucher_documentation' => 'setHasVoucherDocumentation',
        'imported_voucher_no' => 'setImportedVoucherNo',
        'is_created_from_ehf' => 'setIsCreatedFromEhf',
        'is_note_main_entry' => 'setIsNoteMainEntry',
        'is_reversed' => 'setIsReversed',
        'last_changed' => 'setLastChanged',
        'location_code' => 'setLocationCode',
        'our_reference_employee_code' => 'setOurReferenceEmployeeCode',
        'product_code' => 'setProductCode',
        'project_code' => 'setProjectCode',
        'quantity' => 'setQuantity',
        'reversed_voucher_no' => 'setReversedVoucherNo',
        'sub_ledger_entry_id' => 'setSubLedgerEntryId',
        'supplier_account_no' => 'setSupplierAccountNo',
        'text' => 'setText',
        'vat_amount' => 'setVatAmount',
        'vat_code' => 'setVatCode',
        'vat_rate' => 'setVatRate',
        'vat_return_specification' => 'setVatReturnSpecification',
        'voucher_cid' => 'setVoucherCid',
        'voucher_credit_note_reference' => 'setVoucherCreditNoteReference',
        'voucher_date' => 'setVoucherDate',
        'voucher_due_date' => 'setVoucherDueDate',
        'voucher_id' => 'setVoucherId',
        'voucher_images_count' => 'setVoucherImagesCount',
        'voucher_no' => 'setVoucherNo',
        'voucher_reference' => 'setVoucherReference',
        'voucher_type' => 'setVoucherType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_code' => 'getAccountCode',
        'amount' => 'getAmount',
        'bank_transfer_id' => 'getBankTransferId',
        'correction_of_voucher_no' => 'getCorrectionOfVoucherNo',
        'created_date' => 'getCreatedDate',
        'created_from_import_journal_id' => 'getCreatedFromImportJournalId',
        'currency_amount' => 'getCurrencyAmount',
        'currency_code' => 'getCurrencyCode',
        'customer_account_no' => 'getCustomerAccountNo',
        'custom_matching_reference' => 'getCustomMatchingReference',
        'date' => 'getDate',
        'department_code' => 'getDepartmentCode',
        'description' => 'getDescription',
        'dim1_code' => 'getDim1Code',
        'dim2_code' => 'getDim2Code',
        'dim3_code' => 'getDim3Code',
        'document_no' => 'getDocumentNo',
        'employee_account_no' => 'getEmployeeAccountNo',
        'external_import_reference' => 'getExternalImportReference',
        'has_voucher_documentation' => 'getHasVoucherDocumentation',
        'imported_voucher_no' => 'getImportedVoucherNo',
        'is_created_from_ehf' => 'getIsCreatedFromEhf',
        'is_note_main_entry' => 'getIsNoteMainEntry',
        'is_reversed' => 'getIsReversed',
        'last_changed' => 'getLastChanged',
        'location_code' => 'getLocationCode',
        'our_reference_employee_code' => 'getOurReferenceEmployeeCode',
        'product_code' => 'getProductCode',
        'project_code' => 'getProjectCode',
        'quantity' => 'getQuantity',
        'reversed_voucher_no' => 'getReversedVoucherNo',
        'sub_ledger_entry_id' => 'getSubLedgerEntryId',
        'supplier_account_no' => 'getSupplierAccountNo',
        'text' => 'getText',
        'vat_amount' => 'getVatAmount',
        'vat_code' => 'getVatCode',
        'vat_rate' => 'getVatRate',
        'vat_return_specification' => 'getVatReturnSpecification',
        'voucher_cid' => 'getVoucherCid',
        'voucher_credit_note_reference' => 'getVoucherCreditNoteReference',
        'voucher_date' => 'getVoucherDate',
        'voucher_due_date' => 'getVoucherDueDate',
        'voucher_id' => 'getVoucherId',
        'voucher_images_count' => 'getVoucherImagesCount',
        'voucher_no' => 'getVoucherNo',
        'voucher_reference' => 'getVoucherReference',
        'voucher_type' => 'getVoucherType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_code', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('bank_transfer_id', $data ?? [], null);
        $this->setIfExists('correction_of_voucher_no', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('created_from_import_journal_id', $data ?? [], null);
        $this->setIfExists('currency_amount', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('customer_account_no', $data ?? [], null);
        $this->setIfExists('custom_matching_reference', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('department_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dim1_code', $data ?? [], null);
        $this->setIfExists('dim2_code', $data ?? [], null);
        $this->setIfExists('dim3_code', $data ?? [], null);
        $this->setIfExists('document_no', $data ?? [], null);
        $this->setIfExists('employee_account_no', $data ?? [], null);
        $this->setIfExists('external_import_reference', $data ?? [], null);
        $this->setIfExists('has_voucher_documentation', $data ?? [], null);
        $this->setIfExists('imported_voucher_no', $data ?? [], null);
        $this->setIfExists('is_created_from_ehf', $data ?? [], null);
        $this->setIfExists('is_note_main_entry', $data ?? [], null);
        $this->setIfExists('is_reversed', $data ?? [], null);
        $this->setIfExists('last_changed', $data ?? [], null);
        $this->setIfExists('location_code', $data ?? [], null);
        $this->setIfExists('our_reference_employee_code', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('project_code', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('reversed_voucher_no', $data ?? [], null);
        $this->setIfExists('sub_ledger_entry_id', $data ?? [], null);
        $this->setIfExists('supplier_account_no', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('vat_amount', $data ?? [], null);
        $this->setIfExists('vat_code', $data ?? [], null);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('vat_return_specification', $data ?? [], null);
        $this->setIfExists('voucher_cid', $data ?? [], null);
        $this->setIfExists('voucher_credit_note_reference', $data ?? [], null);
        $this->setIfExists('voucher_date', $data ?? [], null);
        $this->setIfExists('voucher_due_date', $data ?? [], null);
        $this->setIfExists('voucher_id', $data ?? [], null);
        $this->setIfExists('voucher_images_count', $data ?? [], null);
        $this->setIfExists('voucher_no', $data ?? [], null);
        $this->setIfExists('voucher_reference', $data ?? [], null);
        $this->setIfExists('voucher_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return int|null
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param int|null $account_code account_code
     *
     * @return self
     */
    public function setAccountCode($account_code)
    {
        if (is_null($account_code)) {
            throw new \InvalidArgumentException('non-nullable account_code cannot be null');
        }
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets bank_transfer_id
     *
     * @return string|null
     */
    public function getBankTransferId()
    {
        return $this->container['bank_transfer_id'];
    }

    /**
     * Sets bank_transfer_id
     *
     * @param string|null $bank_transfer_id bank_transfer_id
     *
     * @return self
     */
    public function setBankTransferId($bank_transfer_id)
    {
        if (is_null($bank_transfer_id)) {
            throw new \InvalidArgumentException('non-nullable bank_transfer_id cannot be null');
        }
        $this->container['bank_transfer_id'] = $bank_transfer_id;

        return $this;
    }

    /**
     * Gets correction_of_voucher_no
     *
     * @return int|null
     */
    public function getCorrectionOfVoucherNo()
    {
        return $this->container['correction_of_voucher_no'];
    }

    /**
     * Sets correction_of_voucher_no
     *
     * @param int|null $correction_of_voucher_no correction_of_voucher_no
     *
     * @return self
     */
    public function setCorrectionOfVoucherNo($correction_of_voucher_no)
    {
        if (is_null($correction_of_voucher_no)) {
            throw new \InvalidArgumentException('non-nullable correction_of_voucher_no cannot be null');
        }
        $this->container['correction_of_voucher_no'] = $correction_of_voucher_no;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_from_import_journal_id
     *
     * @return string|null
     */
    public function getCreatedFromImportJournalId()
    {
        return $this->container['created_from_import_journal_id'];
    }

    /**
     * Sets created_from_import_journal_id
     *
     * @param string|null $created_from_import_journal_id created_from_import_journal_id
     *
     * @return self
     */
    public function setCreatedFromImportJournalId($created_from_import_journal_id)
    {
        if (is_null($created_from_import_journal_id)) {
            throw new \InvalidArgumentException('non-nullable created_from_import_journal_id cannot be null');
        }
        $this->container['created_from_import_journal_id'] = $created_from_import_journal_id;

        return $this;
    }

    /**
     * Gets currency_amount
     *
     * @return float|null
     */
    public function getCurrencyAmount()
    {
        return $this->container['currency_amount'];
    }

    /**
     * Sets currency_amount
     *
     * @param float|null $currency_amount currency_amount
     *
     * @return self
     */
    public function setCurrencyAmount($currency_amount)
    {
        if (is_null($currency_amount)) {
            throw new \InvalidArgumentException('non-nullable currency_amount cannot be null');
        }
        $this->container['currency_amount'] = $currency_amount;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets customer_account_no
     *
     * @return int|null
     */
    public function getCustomerAccountNo()
    {
        return $this->container['customer_account_no'];
    }

    /**
     * Sets customer_account_no
     *
     * @param int|null $customer_account_no customer_account_no
     *
     * @return self
     */
    public function setCustomerAccountNo($customer_account_no)
    {
        if (is_null($customer_account_no)) {
            throw new \InvalidArgumentException('non-nullable customer_account_no cannot be null');
        }
        $this->container['customer_account_no'] = $customer_account_no;

        return $this;
    }

    /**
     * Gets custom_matching_reference
     *
     * @return string|null
     */
    public function getCustomMatchingReference()
    {
        return $this->container['custom_matching_reference'];
    }

    /**
     * Sets custom_matching_reference
     *
     * @param string|null $custom_matching_reference custom_matching_reference
     *
     * @return self
     */
    public function setCustomMatchingReference($custom_matching_reference)
    {
        if (is_null($custom_matching_reference)) {
            throw new \InvalidArgumentException('non-nullable custom_matching_reference cannot be null');
        }
        $this->container['custom_matching_reference'] = $custom_matching_reference;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets department_code
     *
     * @return string|null
     */
    public function getDepartmentCode()
    {
        return $this->container['department_code'];
    }

    /**
     * Sets department_code
     *
     * @param string|null $department_code department_code
     *
     * @return self
     */
    public function setDepartmentCode($department_code)
    {
        if (is_null($department_code)) {
            throw new \InvalidArgumentException('non-nullable department_code cannot be null');
        }
        $this->container['department_code'] = $department_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dim1_code
     *
     * @return string|null
     */
    public function getDim1Code()
    {
        return $this->container['dim1_code'];
    }

    /**
     * Sets dim1_code
     *
     * @param string|null $dim1_code dim1_code
     *
     * @return self
     */
    public function setDim1Code($dim1_code)
    {
        if (is_null($dim1_code)) {
            throw new \InvalidArgumentException('non-nullable dim1_code cannot be null');
        }
        $this->container['dim1_code'] = $dim1_code;

        return $this;
    }

    /**
     * Gets dim2_code
     *
     * @return string|null
     */
    public function getDim2Code()
    {
        return $this->container['dim2_code'];
    }

    /**
     * Sets dim2_code
     *
     * @param string|null $dim2_code dim2_code
     *
     * @return self
     */
    public function setDim2Code($dim2_code)
    {
        if (is_null($dim2_code)) {
            throw new \InvalidArgumentException('non-nullable dim2_code cannot be null');
        }
        $this->container['dim2_code'] = $dim2_code;

        return $this;
    }

    /**
     * Gets dim3_code
     *
     * @return string|null
     */
    public function getDim3Code()
    {
        return $this->container['dim3_code'];
    }

    /**
     * Sets dim3_code
     *
     * @param string|null $dim3_code dim3_code
     *
     * @return self
     */
    public function setDim3Code($dim3_code)
    {
        if (is_null($dim3_code)) {
            throw new \InvalidArgumentException('non-nullable dim3_code cannot be null');
        }
        $this->container['dim3_code'] = $dim3_code;

        return $this;
    }

    /**
     * Gets document_no
     *
     * @return string|null
     */
    public function getDocumentNo()
    {
        return $this->container['document_no'];
    }

    /**
     * Sets document_no
     *
     * @param string|null $document_no document_no
     *
     * @return self
     */
    public function setDocumentNo($document_no)
    {
        if (is_null($document_no)) {
            throw new \InvalidArgumentException('non-nullable document_no cannot be null');
        }
        $this->container['document_no'] = $document_no;

        return $this;
    }

    /**
     * Gets employee_account_no
     *
     * @return int|null
     */
    public function getEmployeeAccountNo()
    {
        return $this->container['employee_account_no'];
    }

    /**
     * Sets employee_account_no
     *
     * @param int|null $employee_account_no employee_account_no
     *
     * @return self
     */
    public function setEmployeeAccountNo($employee_account_no)
    {
        if (is_null($employee_account_no)) {
            throw new \InvalidArgumentException('non-nullable employee_account_no cannot be null');
        }
        $this->container['employee_account_no'] = $employee_account_no;

        return $this;
    }

    /**
     * Gets external_import_reference
     *
     * @return string|null
     */
    public function getExternalImportReference()
    {
        return $this->container['external_import_reference'];
    }

    /**
     * Sets external_import_reference
     *
     * @param string|null $external_import_reference external_import_reference
     *
     * @return self
     */
    public function setExternalImportReference($external_import_reference)
    {
        if (is_null($external_import_reference)) {
            throw new \InvalidArgumentException('non-nullable external_import_reference cannot be null');
        }
        $this->container['external_import_reference'] = $external_import_reference;

        return $this;
    }

    /**
     * Gets has_voucher_documentation
     *
     * @return string|null
     */
    public function getHasVoucherDocumentation()
    {
        return $this->container['has_voucher_documentation'];
    }

    /**
     * Sets has_voucher_documentation
     *
     * @param string|null $has_voucher_documentation has_voucher_documentation
     *
     * @return self
     */
    public function setHasVoucherDocumentation($has_voucher_documentation)
    {
        if (is_null($has_voucher_documentation)) {
            throw new \InvalidArgumentException('non-nullable has_voucher_documentation cannot be null');
        }
        $this->container['has_voucher_documentation'] = $has_voucher_documentation;

        return $this;
    }

    /**
     * Gets imported_voucher_no
     *
     * @return int|null
     */
    public function getImportedVoucherNo()
    {
        return $this->container['imported_voucher_no'];
    }

    /**
     * Sets imported_voucher_no
     *
     * @param int|null $imported_voucher_no imported_voucher_no
     *
     * @return self
     */
    public function setImportedVoucherNo($imported_voucher_no)
    {
        if (is_null($imported_voucher_no)) {
            throw new \InvalidArgumentException('non-nullable imported_voucher_no cannot be null');
        }
        $this->container['imported_voucher_no'] = $imported_voucher_no;

        return $this;
    }

    /**
     * Gets is_created_from_ehf
     *
     * @return bool|null
     */
    public function getIsCreatedFromEhf()
    {
        return $this->container['is_created_from_ehf'];
    }

    /**
     * Sets is_created_from_ehf
     *
     * @param bool|null $is_created_from_ehf is_created_from_ehf
     *
     * @return self
     */
    public function setIsCreatedFromEhf($is_created_from_ehf)
    {
        if (is_null($is_created_from_ehf)) {
            throw new \InvalidArgumentException('non-nullable is_created_from_ehf cannot be null');
        }
        $this->container['is_created_from_ehf'] = $is_created_from_ehf;

        return $this;
    }

    /**
     * Gets is_note_main_entry
     *
     * @return bool|null
     */
    public function getIsNoteMainEntry()
    {
        return $this->container['is_note_main_entry'];
    }

    /**
     * Sets is_note_main_entry
     *
     * @param bool|null $is_note_main_entry is_note_main_entry
     *
     * @return self
     */
    public function setIsNoteMainEntry($is_note_main_entry)
    {
        if (is_null($is_note_main_entry)) {
            throw new \InvalidArgumentException('non-nullable is_note_main_entry cannot be null');
        }
        $this->container['is_note_main_entry'] = $is_note_main_entry;

        return $this;
    }

    /**
     * Gets is_reversed
     *
     * @return bool|null
     */
    public function getIsReversed()
    {
        return $this->container['is_reversed'];
    }

    /**
     * Sets is_reversed
     *
     * @param bool|null $is_reversed is_reversed
     *
     * @return self
     */
    public function setIsReversed($is_reversed)
    {
        if (is_null($is_reversed)) {
            throw new \InvalidArgumentException('non-nullable is_reversed cannot be null');
        }
        $this->container['is_reversed'] = $is_reversed;

        return $this;
    }

    /**
     * Gets last_changed
     *
     * @return string|null
     */
    public function getLastChanged()
    {
        return $this->container['last_changed'];
    }

    /**
     * Sets last_changed
     *
     * @param string|null $last_changed last_changed
     *
     * @return self
     */
    public function setLastChanged($last_changed)
    {
        if (is_null($last_changed)) {
            throw new \InvalidArgumentException('non-nullable last_changed cannot be null');
        }
        $this->container['last_changed'] = $last_changed;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string|null
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string|null $location_code location_code
     *
     * @return self
     */
    public function setLocationCode($location_code)
    {
        if (is_null($location_code)) {
            throw new \InvalidArgumentException('non-nullable location_code cannot be null');
        }
        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets our_reference_employee_code
     *
     * @return int|null
     */
    public function getOurReferenceEmployeeCode()
    {
        return $this->container['our_reference_employee_code'];
    }

    /**
     * Sets our_reference_employee_code
     *
     * @param int|null $our_reference_employee_code our_reference_employee_code
     *
     * @return self
     */
    public function setOurReferenceEmployeeCode($our_reference_employee_code)
    {
        if (is_null($our_reference_employee_code)) {
            throw new \InvalidArgumentException('non-nullable our_reference_employee_code cannot be null');
        }
        $this->container['our_reference_employee_code'] = $our_reference_employee_code;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code product_code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets project_code
     *
     * @return string|null
     */
    public function getProjectCode()
    {
        return $this->container['project_code'];
    }

    /**
     * Sets project_code
     *
     * @param string|null $project_code project_code
     *
     * @return self
     */
    public function setProjectCode($project_code)
    {
        if (is_null($project_code)) {
            throw new \InvalidArgumentException('non-nullable project_code cannot be null');
        }
        $this->container['project_code'] = $project_code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reversed_voucher_no
     *
     * @return int|null
     */
    public function getReversedVoucherNo()
    {
        return $this->container['reversed_voucher_no'];
    }

    /**
     * Sets reversed_voucher_no
     *
     * @param int|null $reversed_voucher_no reversed_voucher_no
     *
     * @return self
     */
    public function setReversedVoucherNo($reversed_voucher_no)
    {
        if (is_null($reversed_voucher_no)) {
            throw new \InvalidArgumentException('non-nullable reversed_voucher_no cannot be null');
        }
        $this->container['reversed_voucher_no'] = $reversed_voucher_no;

        return $this;
    }

    /**
     * Gets sub_ledger_entry_id
     *
     * @return int|null
     */
    public function getSubLedgerEntryId()
    {
        return $this->container['sub_ledger_entry_id'];
    }

    /**
     * Sets sub_ledger_entry_id
     *
     * @param int|null $sub_ledger_entry_id sub_ledger_entry_id
     *
     * @return self
     */
    public function setSubLedgerEntryId($sub_ledger_entry_id)
    {
        if (is_null($sub_ledger_entry_id)) {
            throw new \InvalidArgumentException('non-nullable sub_ledger_entry_id cannot be null');
        }
        $this->container['sub_ledger_entry_id'] = $sub_ledger_entry_id;

        return $this;
    }

    /**
     * Gets supplier_account_no
     *
     * @return int|null
     */
    public function getSupplierAccountNo()
    {
        return $this->container['supplier_account_no'];
    }

    /**
     * Sets supplier_account_no
     *
     * @param int|null $supplier_account_no supplier_account_no
     *
     * @return self
     */
    public function setSupplierAccountNo($supplier_account_no)
    {
        if (is_null($supplier_account_no)) {
            throw new \InvalidArgumentException('non-nullable supplier_account_no cannot be null');
        }
        $this->container['supplier_account_no'] = $supplier_account_no;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float|null $vat_amount vat_amount
     *
     * @return self
     */
    public function setVatAmount($vat_amount)
    {
        if (is_null($vat_amount)) {
            throw new \InvalidArgumentException('non-nullable vat_amount cannot be null');
        }
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets vat_code
     *
     * @return string|null
     */
    public function getVatCode()
    {
        return $this->container['vat_code'];
    }

    /**
     * Sets vat_code
     *
     * @param string|null $vat_code vat_code
     *
     * @return self
     */
    public function setVatCode($vat_code)
    {
        if (is_null($vat_code)) {
            throw new \InvalidArgumentException('non-nullable vat_code cannot be null');
        }
        $this->container['vat_code'] = $vat_code;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate vat_rate
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        if (is_null($vat_rate)) {
            throw new \InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets vat_return_specification
     *
     * @return float|null
     */
    public function getVatReturnSpecification()
    {
        return $this->container['vat_return_specification'];
    }

    /**
     * Sets vat_return_specification
     *
     * @param float|null $vat_return_specification vat_return_specification
     *
     * @return self
     */
    public function setVatReturnSpecification($vat_return_specification)
    {
        if (is_null($vat_return_specification)) {
            throw new \InvalidArgumentException('non-nullable vat_return_specification cannot be null');
        }
        $this->container['vat_return_specification'] = $vat_return_specification;

        return $this;
    }

    /**
     * Gets voucher_cid
     *
     * @return string|null
     */
    public function getVoucherCid()
    {
        return $this->container['voucher_cid'];
    }

    /**
     * Sets voucher_cid
     *
     * @param string|null $voucher_cid voucher_cid
     *
     * @return self
     */
    public function setVoucherCid($voucher_cid)
    {
        if (is_null($voucher_cid)) {
            throw new \InvalidArgumentException('non-nullable voucher_cid cannot be null');
        }
        $this->container['voucher_cid'] = $voucher_cid;

        return $this;
    }

    /**
     * Gets voucher_credit_note_reference
     *
     * @return string|null
     */
    public function getVoucherCreditNoteReference()
    {
        return $this->container['voucher_credit_note_reference'];
    }

    /**
     * Sets voucher_credit_note_reference
     *
     * @param string|null $voucher_credit_note_reference voucher_credit_note_reference
     *
     * @return self
     */
    public function setVoucherCreditNoteReference($voucher_credit_note_reference)
    {
        if (is_null($voucher_credit_note_reference)) {
            throw new \InvalidArgumentException('non-nullable voucher_credit_note_reference cannot be null');
        }
        $this->container['voucher_credit_note_reference'] = $voucher_credit_note_reference;

        return $this;
    }

    /**
     * Gets voucher_date
     *
     * @return string|null
     */
    public function getVoucherDate()
    {
        return $this->container['voucher_date'];
    }

    /**
     * Sets voucher_date
     *
     * @param string|null $voucher_date voucher_date
     *
     * @return self
     */
    public function setVoucherDate($voucher_date)
    {
        if (is_null($voucher_date)) {
            throw new \InvalidArgumentException('non-nullable voucher_date cannot be null');
        }
        $this->container['voucher_date'] = $voucher_date;

        return $this;
    }

    /**
     * Gets voucher_due_date
     *
     * @return string|null
     */
    public function getVoucherDueDate()
    {
        return $this->container['voucher_due_date'];
    }

    /**
     * Sets voucher_due_date
     *
     * @param string|null $voucher_due_date voucher_due_date
     *
     * @return self
     */
    public function setVoucherDueDate($voucher_due_date)
    {
        if (is_null($voucher_due_date)) {
            throw new \InvalidArgumentException('non-nullable voucher_due_date cannot be null');
        }
        $this->container['voucher_due_date'] = $voucher_due_date;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string|null
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string|null $voucher_id voucher_id
     *
     * @return self
     */
    public function setVoucherId($voucher_id)
    {
        if (is_null($voucher_id)) {
            throw new \InvalidArgumentException('non-nullable voucher_id cannot be null');
        }
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets voucher_images_count
     *
     * @return int|null
     */
    public function getVoucherImagesCount()
    {
        return $this->container['voucher_images_count'];
    }

    /**
     * Sets voucher_images_count
     *
     * @param int|null $voucher_images_count voucher_images_count
     *
     * @return self
     */
    public function setVoucherImagesCount($voucher_images_count)
    {
        if (is_null($voucher_images_count)) {
            throw new \InvalidArgumentException('non-nullable voucher_images_count cannot be null');
        }
        $this->container['voucher_images_count'] = $voucher_images_count;

        return $this;
    }

    /**
     * Gets voucher_no
     *
     * @return int|null
     */
    public function getVoucherNo()
    {
        return $this->container['voucher_no'];
    }

    /**
     * Sets voucher_no
     *
     * @param int|null $voucher_no voucher_no
     *
     * @return self
     */
    public function setVoucherNo($voucher_no)
    {
        if (is_null($voucher_no)) {
            throw new \InvalidArgumentException('non-nullable voucher_no cannot be null');
        }
        $this->container['voucher_no'] = $voucher_no;

        return $this;
    }

    /**
     * Gets voucher_reference
     *
     * @return int|null
     */
    public function getVoucherReference()
    {
        return $this->container['voucher_reference'];
    }

    /**
     * Sets voucher_reference
     *
     * @param int|null $voucher_reference voucher_reference
     *
     * @return self
     */
    public function setVoucherReference($voucher_reference)
    {
        if (is_null($voucher_reference)) {
            throw new \InvalidArgumentException('non-nullable voucher_reference cannot be null');
        }
        $this->container['voucher_reference'] = $voucher_reference;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return int|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param int|null $voucher_type voucher_type
     *
     * @return self
     */
    public function setVoucherType($voucher_type)
    {
        if (is_null($voucher_type)) {
            throw new \InvalidArgumentException('non-nullable voucher_type cannot be null');
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


